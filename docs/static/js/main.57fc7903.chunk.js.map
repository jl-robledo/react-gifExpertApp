{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAMaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAAqB,EAEZC,mBAAS,IAFG,mBAEzCC,EAFyC,KAE7BC,EAF6B,KAyBhD,OACI,sBAAMC,SAfW,SAACC,GAClBA,EAAEC,iBAGGJ,EAAWK,OAAOC,OAAS,IAG5BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACxCN,EAAe,MAOnB,SAEI,uBACIO,KAAO,OACPC,MAAUT,EACVU,SA3Bc,SAAEP,GAGxBF,EAAeE,EAAEQ,OAAOF,a,+BCXnBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAGbC,EAHa,iDAGoCC,UAAWH,GAH/C,+DAIAI,MAAOF,GAJP,cAIbG,EAJa,gBAKIA,EAAKC,OALT,uBAKXC,EALW,EAKXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXvB,kBAeZM,GAfY,4CAAH,sDCAPO,EAAc,SAAC,GAAyB,EAAtBJ,GAAuB,IAAnBC,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IAItC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,kCAAMA,EAAN,WCFCO,EAAU,SAAC,GAAmB,IAAhBnB,EAAe,EAAfA,SAAe,ECFd,SAAEA,GAAe,IAAD,EAEZd,mBAAS,CAEjCqB,KAAM,GACNa,SAAS,IAL2B,mBAEhCC,EAFgC,KAEzBC,EAFyB,KAqBxC,OAZAC,qBAAW,WACPxB,EAASC,GACJwB,MAAM,SAAAC,GAEHH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAItB,CAAEpB,IAEEqB,EDf0BK,CAAc1B,GAAlCa,EAJyB,EAI/BN,KAAca,EAJiB,EAIjBA,QAYrB,OACI,qCACI,qBAAIJ,UAAU,oCAAd,cAAqDhB,EAArD,OAEEoB,GAAW,mBAAGJ,UAAU,mCAAb,wBAHjB,KAKI,qBAAKA,UAAU,YAAf,SAEQH,EAAOJ,KAAK,SAAEC,GAAF,OAER,cAAC,EAAD,eAESA,GADGA,EAAIC,aEzB3BgB,EAAe,WAAM,MAGMzC,mBAAS,CAAC,gBAHhB,mBAGvB0C,EAHuB,KAGX3C,EAHW,KAe9B,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAiBA,IAC9B,uBAMA,6BAEQ2C,EAAWnB,KAAK,SAAAT,GAAQ,OAKpB,aAJA,CAIC,EAAD,CAEIA,SAAaA,GADLA,Y,MCnCpC6B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.57fc7903.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\n//importamos PropTypes\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nexport const AddCategory = ( { setCategories } ) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = ( e ) => {\r\n\r\n        // console.log(e.target.value);\r\n        setInputValue( e.target.value );\r\n\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        // console.log('Submit hecho');\r\n\r\n        if ( inputValue.trim().length > 2 ) {\r\n\r\n            //le pasamos las properties a traves del argumento desestructurado\r\n            setCategories( cats => [ inputValue, ...cats ] );\r\n            setInputValue( '' );\r\n\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <form onSubmit= { handleSubmit }>\r\n            \r\n            <input \r\n                type = \"text\"\r\n                value = { inputValue }\r\n                onChange={ handleInputChange }\r\n            \r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n\r\n}\r\n","\r\n\r\nexport const getGifs = async( category ) => {\r\n\r\n    // peticion http de la data\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category )}&limit=10&api_key=eEWG21qqNpVo28ySdCXzA3Xy2HZfvvWe`;\r\n    const resp = await fetch( url );\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url \r\n        }\r\n    })\r\n\r\n    return gifs;\r\n\r\n    // setImages( gifs );\r\n\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ( { id, title, url } ) => {\r\n\r\n    // console.log( { id, title, url } )\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={ url } alt={ title } />\r\n            <p> { title } </p>\r\n        </div>\r\n    )\r\n}\r\n","import React, {/* useState, useEffect */} from 'react'; // los quitamos para utilizar el useFetchGifs\r\n// import { getGifs } from '../helpers/getGifs';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\n\r\n\r\nexport const GifGrid = ( { category }) => {\r\n\r\n   // const [ images, setImages ] = useState( [] );\r\n\r\n   const { data: images, loading } = useFetchGifs( category );  // renderizacion en el componente\r\n   // renombramos la data y la llamamos images\r\n\r\n    // se implementa para que cada vez que se hacia un cambio se volviera a ejecutar\r\n    // useEffect( () => {           \r\n    //     getGifs( category )\r\n    //         .then( setImages )\r\n    // }, [ category ])\r\n\r\n\r\n    // getGifs();\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\"> { category } </h3>\r\n\r\n            { loading && <p className=\"animate__animated animate__flash\">Loading...</p> }  {/* si es true se muestra el mensaje */}\r\n\r\n            <div className=\"card-grid\"> \r\n                {\r\n                    images.map( ( img ) => (\r\n\r\n                        <GifGridItem \r\n                            key = { img.id }\r\n                            { ...img } \r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n","import { useEffect, useState } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\n// los hooks no son mas que funciones se diferencian de los funcional component \r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n    const [ state, setState ] = useState({\r\n\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    \r\n    useEffect( () =>{                   // se usa el efecto para que se use cuando cambie la categoria (busqueda)\r\n        getGifs( category )             // peticion http\r\n            .then( imgs => {            // tenemos las imagenes\r\n\r\n                setState({          // cuando tenemos la data cambiando la informacion\r\n                    data: imgs,\r\n                    loading: false\r\n                });\r\n            })\r\n            \r\n    }, [ category ])\r\n\r\n    return state;\r\n\r\n}\r\n","// importamos react\r\nimport React, { useState } from 'react';\r\n\r\n// importamos PropTypes\r\n// import PropTypes from 'prop-types';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n// creamos el componente\r\nexport const GifExpertApp = () => {\r\n\r\n    // const categories = ['One Punch', 'Samurai X', 'Dragon Ball'];\r\n    const [categories, setCategories] = useState(['Dragon Ball'])\r\n\r\n    // const handleAdd = () => {\r\n\r\n    //     // setCategories ( [...categories, 'Hunter X Hunter'] );\r\n    //     // se puede poner delante de los elementos seria de la siguiente forma\r\n    //     // setCategories ( ['Hunter X Hunter', ...categories] );\r\n\r\n    //     // otra forma de hacerlo mas util\r\n    //     setCategories( cats => [ ...categories , 'Hunter X Hunter' ] );\r\n    // }\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories= { setCategories }/>\r\n            <hr />\r\n\r\n           {/*  quitamos el boton porque añadiremos las categorias mediante un formulario\r\n            <button onClick= { handleAdd }>Agregar</button>\r\n           */}\r\n\r\n            <ol>\r\n                {\r\n                    categories.map( category => (\r\n                        // <li key= { category }> { category } </li>\r\n                        // es necesario poner el key porque hacer referencia a la llave que los hace unico\r\n                    \r\n                        // añadimos el nuevo componente\r\n                        <GifGrid \r\n                            key = { category }\r\n                            category = { category } \r\n                        />\r\n                    ))\r\n\r\n                }\r\n            </ol>\r\n\r\n\r\n\r\n        </>\r\n    );\r\n\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n\n\n"],"sourceRoot":""}